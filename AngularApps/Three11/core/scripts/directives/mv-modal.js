// Generated by CoffeeScript 1.9.2
(function() {
  'use strict';
  define(['lodash', 'core/util/props'], function(_, defineProperties) {
    return function($injector) {
      var $log, $modalService, logError, theDirective;
      $modalService = $injector.get('$modal');
      $log = $injector.get('$log');
      logError = function(e) {
        return $log.error(e);
      };
      return theDirective = {
        restrict: 'A',
        scope: {
          id: '@mvModal',
          activeClass: '@',
          onModalAccept: '&',
          onModalDismiss: '&'
        },
        transclude: true,
        replace: true,
        template: '<button data-ng-transclude data-ng-click=";open()"/>',
        compile: function(element, attributes) {
          var createModalData, createScopeIfData, extractInstanceData;
          extractInstanceData = ($injector.get('$parse'))(attributes.mvModalData);
          createModalData = function(scope, config, attributes) {
            var configData, instanceData;
            configData = config.data;
            instanceData = extractInstanceData(scope.$parent);
            if ((configData != null) && (instanceData != null)) {
              configData = _(configData);
              instanceData = _(instanceData);
              if (configData.isObject() && instanceData.isObject()) {
                return (configData.extend(instanceData.value())).value();
              } else if (configData.isObject()) {
                return configData.extend({
                  instance: instanceData.value()
                }).value();
              } else if (instanceData.isObject()) {
                return instanceData.extend({
                  config: configData.value()
                }).value();
              } else {
                return {
                  config: configData.value(),
                  instance: instanceData.value()
                };
              }
            } else if (configData != null) {
              return configData;
            } else {
              return instanceData;
            }
          };
          createScopeIfData = function(scope, config, attributes) {
            var cscope, modalData;
            modalData = createModalData(scope, config, attributes);
            if (modalData != null) {
              cscope = scope.$new();
              cscope.modalData = modalData;
              return cscope;
            }
          };
          return function($scope, element, attributes) {
            var _isOpen, _modalConfig, reset;
            _isOpen = false;
            _modalConfig = _($injector.get($scope.id + "Modal")).cloneDeep();
            reset = function() {
              if ($scope.activeClass) {
                element.removeClass($scope.activeClass);
              }
              _isOpen = false;
            };
            return defineProperties($scope, {
              isOpen: {
                get: function() {
                  return _isOpen;
                }
              },
              open: {
                value: function() {
                  var onAccept, onDismiss;
                  if (_isOpen) {
                    return;
                  }
                  _modalConfig.scope = createScopeIfData($scope, _modalConfig, attributes);
                  _isOpen = true;
                  if ($scope.activeClass) {
                    element.addClass($scope.activeClass);
                  }
                  onAccept = function(result) {
                    var e;
                    try {
                      $scope.onModalAccept({
                        $result: result
                      });
                    } catch (_error) {
                      e = _error;
                      logError(e);
                    } finally {
                      reset();
                    }
                  };
                  onDismiss = function(reason) {
                    var e;
                    try {
                      $scope.onModalDismiss({
                        $reason: reason
                      });
                    } catch (_error) {
                      e = _error;
                      logError(e);
                    } finally {
                      reset();
                    }
                  };
                  return $modalService.open(_modalConfig).result.then(onAccept, onDismiss);
                }
              }
            });
          };
        }
      };
    };
  });

}).call(this);
