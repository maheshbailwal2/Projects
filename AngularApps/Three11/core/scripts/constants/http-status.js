// Generated by CoffeeScript 1.9.2
(function() {
  define(['core/util/prop'], function(prop) {
    var appendReadOnlyProperty, httpStatus;
    httpStatus = {};
    appendReadOnlyProperty = function(value, name) {
      prop(httpStatus, name, {
        enumerable: true,
        value: value,
        writable: false
      });
    };
    appendReadOnlyProperty((function(val) {
      return 200 < val || val >= 600;
    }), 'isUnknown');
    appendReadOnlyProperty(200, 'OK');
    appendReadOnlyProperty(201, 'Created');
    appendReadOnlyProperty(202, 'Acccepted');
    appendReadOnlyProperty(204, 'No Content');
    appendReadOnlyProperty((function(val) {
      return (200 <= val && val < 300);
    }), 'wasSuccesful');
    appendReadOnlyProperty(304, 'Not Modified');
    appendReadOnlyProperty((function(val) {
      return (200 <= val && val < 400);
    }), 'wasProcessed');
    appendReadOnlyProperty(400, 'Bad Request');
    appendReadOnlyProperty(401, 'Unauthorized');
    appendReadOnlyProperty(403, 'Forbidden');
    appendReadOnlyProperty(404, 'Not Found');
    appendReadOnlyProperty(405, 'Not Allowed');
    appendReadOnlyProperty(406, 'Not Acceptable');
    appendReadOnlyProperty(408, 'Request Timeout');
    appendReadOnlyProperty(409, 'Conflict');
    appendReadOnlyProperty(410, 'Gone');
    appendReadOnlyProperty((function(val) {
      return (400 <= val && val < 500);
    }), 'hasClientError');
    appendReadOnlyProperty(500, 'Internal ServerError');
    appendReadOnlyProperty(501, 'Not Implemented');
    appendReadOnlyProperty(503, 'Service Unavailable');
    appendReadOnlyProperty((function(val) {
      return (500 <= val && val < 600);
    }), 'hasServerError');
    appendReadOnlyProperty((function(val) {
      return (400 <= val && val < 600);
    }), 'hasError');
    return httpStatus;
  });

}).call(this);
