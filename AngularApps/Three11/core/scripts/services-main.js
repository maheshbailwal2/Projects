// Generated by CoffeeScript 1.9.2
(function() {
  'use strict';
  define(['angular', 'lodash', 'core/app', 'core/services/query', 'core/services/auth-token', 'core/services/app-director', 'core/services/long-polling', 'core/services/status-tracker', 'core/services/http-errors-handler', 'core/providers/wrapper', 'core/util/create-event', 'core/services/current-user'], function(ng, _, app, createQueryService, createAuthToken, createAppDirectorService, createPollingAlgorithm, createStatusTrackerService, createHttpErrorsHandlerService, createProviderWrapper, createEvent, createCurrentUserService) {
    var appReady, authToken, currentUser, loginNotifier, logoutNotifier, pollingAlgorithm, queryService, services;
    services = ng.module('mvWebUi.services');
    queryService = 'queryService';
    services.service(queryService, createQueryService);
    authToken = 'authToken';
    services.service(authToken, ['$window', createAuthToken]);
    loginNotifier = 'loginNotifier';
    services.service(loginNotifier, ['$log', createEvent(loginNotifier)]);
    logoutNotifier = 'logoutNotifier';
    services.service(logoutNotifier, [
      '$log', authToken, queryService, function($log, authToken, queryService) {
        var notifier;
        notifier = createEvent(logoutNotifier)($log);
        notifier(function() {
          authToken.clear();
          queryService.clear();
        });
        return notifier;
      }
    ]);
    appReady = 'appReady';
    services.service(appReady, ['$log', createEvent(appReady)]);
    pollingAlgorithm = 'pollingAlgorithm';
    services.service(pollingAlgorithm, createPollingAlgorithm);
    currentUser = 'currentUserService';
    services.service(currentUser, ['queryService', '$log', createCurrentUserService]);
    app.provider('appDirector', createAppDirectorService).provider('statusTracker', createProviderWrapper([pollingAlgorithm, createStatusTrackerService])).provider('httpErrorInterceptor', createHttpErrorsHandlerService).config([
      '$httpProvider', function(provider) {
        provider.interceptors.unshift('httpErrorInterceptor');
      }
    ]);
  });

}).call(this);
