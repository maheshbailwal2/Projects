// Generated by CoffeeScript 1.9.2
(function() {
  'use strict';
  define(['lodash', 'core/util/create-observer-container', 'core/util/assert'], function(_, createObserverContainer, Assert) {
    var defineProp;
    defineProp = Object.defineProperty;
    return function(obj, $log) {
      var _obs, appendProperty, createPropertyValue, detach, notify, theObservable;
      _obs = {};
      theObservable = Object.create(obj);
      notify = function(key, args) {
        if (args == null) {
          args = [obj];
        } else {
          args = [args];
        }
        _obs[key].notify.apply(null, args);
      };
      createPropertyValue = function(key) {
        var prop, value;
        prop = obj[key];
        if (_.isFunction(prop)) {
          value = {
            value: function() {
              var args, result;
              args = Array.prototype.slice.call(arguments);
              result = prop.apply(obj, args);
              notify(key, result);
              return result;
            }
          };
        } else {
          value = {
            get: function() {
              return obj[key];
            },
            set: function(value) {
              if (obj[key] !== value) {
                obj[key] = value;
                notify(key);
              }
              return value;
            }
          };
        }
        return value;
      };
      appendProperty = function(key) {
        defineProp(theObservable, key, _.extend({
          configurable: true,
          enumerable: true
        }, createPropertyValue(key)));
      };
      detach = function(key, d) {
        d();
        if (_obs[key].isEmpty) {
          delete _obs[key];
          delete theObservable[key];
        }
      };
      defineProp(theObservable, 'on', {
        configurable: true,
        value: function(key, func) {
          Assert["true"](key in obj);
          if (!_.has(_obs, key)) {
            _obs[key] = createObserverContainer($log);
          }
          if (!_.has(theObservable, key)) {
            appendProperty(key);
          }
          return _.bind(detach, null, key, _obs[key].append(func));
        }
      });
      return theObservable;
    };
  });

}).call(this);
