// Generated by CoffeeScript 1.9.2
(function() {
  'use strict';
  define(['lodash', 'core/util/capitalize', 'core/util/create-observer-container', 'core/util/props', 'core/util/prop', 'core/util/assert'], function(_, capitalize, createObserverContainer, defineProperties, defineProperty, Assert) {
    return function(config) {
      return function(startPolling) {
        var _errorObservers, _observers, _polls, appendIfQuery, prepareObserversAndStart, registerForStatusUpdate, theService;
        _observers = {};
        _errorObservers = {};
        _polls = {};
        prepareObserversAndStart = function(funcKey, id) {
          var bindNotify, notifyFailure, notifySuccess;
          bindNotify = function(col) {
            return _(col[id].notify).bind(col).value();
          };
          notifySuccess = bindNotify(_observers);
          notifyFailure = bindNotify(_errorObservers);
          _polls[id] = startPolling(funcKey, notifySuccess, notifyFailure);
        };
        registerForStatusUpdate = function(funcKey, id) {
          return function(onSuccess, onError) {
            var detach;
            if (onSuccess != null) {
              detach = _observers[id].append(onSuccess);
            }
            if (onError != null) {
              detach = (function(detach, onError) {
                var detachError;
                detachError = _errorObservers[id].append(onError);
                if (detach != null) {
                  return _.compose(detach, detachError);
                } else {
                  return detachError;
                }
              })(detach, onError);
            }
            if (!_(_polls).has(id)) {
              prepareObserversAndStart(funcKey, id);
            }
            return function() {
              var hasObs;
              detach();
              hasObs = function(col, id) {
                return (col[id] != null) && !col[id].isEmpty;
              };
              if (!((hasObs(_observers, id)) || (hasObs(_errorObservers, id)))) {
                if (typeof _polls[id] === "function") {
                  _polls[id]();
                }
                return delete _polls[id];
              }
            };
          };
        };
        appendIfQuery = function(obj, funcKey, id) {
          var extFuncKey;
          if (startPolling.isValidQuery(funcKey)) {
            extFuncKey = "of" + (capitalize(id));
            Assert["false"](_.has(obj, extFuncKey));
            defineProperty(obj, extFuncKey, {
              enumerable: true,
              configurable: true,
              value: registerForStatusUpdate(funcKey, id)
            });
            _observers[id] = createObserverContainer();
            _errorObservers[id] = createObserverContainer();
          }
          return obj;
        };
        theService = {};
        return defineProperties(theService, {
          isTracking: {
            value: function(resourceKey) {
              return _polls[resourceKey] != null;
            }
          },
          init: {
            value: function() {
              _(config).reduce(appendIfQuery, theService);
            }
          },
          clear: {
            value: function() {
              _(this).keys().each((function(key) {
                return delete this[key];
              }), this);
              _observers = {};
              _errorObservers = {};
              _(_polls).forIn(function(cancel) {
                cancel();
              });
              _polls = {};
            }
          }
        });
      };
    };
  });

}).call(this);
