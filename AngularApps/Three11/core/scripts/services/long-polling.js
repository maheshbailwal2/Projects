// Generated by CoffeeScript 1.9.2
(function() {
  'use strict';
  define(['lodash', 'core/constants/http-status', 'core/util/is-request-cancelled'], function(_, HttpStatus, isRequestCancelled) {
    return [
      'queryService', '$timeout', function(queryService, $timeout) {
        var ReconnectDelayInMs, longPolling;
        ReconnectDelayInMs = 4500;
        longPolling = function(funcKey, onSuccess, onFailure) {
          var _activePromise, _hash, _isConnected, _isEnabled, cancel, connect, enable, whenFailure, whenSuccess;
          _isEnabled = false;
          _isConnected = false;
          _hash = void 0;
          _activePromise = void 0;
          connect = function() {
            if (!_isConnected) {
              _isConnected = true;
              _activePromise = queryService[funcKey]({
                hash: _hash
              });
              _activePromise.then(whenSuccess, whenFailure);
            }
          };
          whenSuccess = function(result) {
            _isConnected = false;
            _activePromise = void 0;
            if (!_isEnabled) {
              return;
            }
            _hash = result.hash;
            if (typeof onSuccess === "function") {
              onSuccess(result);
            }
            connect();
          };
          whenFailure = function(reason) {
            var status;
            _isConnected = false;
            _activePromise = void 0;
            if (!_isEnabled) {
              return;
            }
            status = reason != null ? reason.status : void 0;
            if ((HttpStatus[status] != null) && HttpStatus[status] === HttpStatus['Request Timeout']) {
              if (_isEnabled) {
                connect();
              }
            } else if (_isEnabled && status <= 0 && !isRequestCancelled(reason)) {
              $timeout(connect, ReconnectDelayInMs);
            } else {
              if (typeof onFailure === "function") {
                onFailure(reason);
              }
            }
          };
          enable = function() {
            if (!_isEnabled) {
              _isEnabled = true;
              _hash = void 0;
              connect();
            }
            return cancel;
          };
          cancel = function() {
            _isEnabled = false;
            _hash = void 0;
            if (_activePromise != null) {
              if (typeof _activePromise.cancel === "function") {
                _activePromise.cancel();
              }
            }
            _activePromise = void 0;
            return enable;
          };
          return enable();
        };
        longPolling.isValidQuery = function(key) {
          return _(queryService).has(key) && _(queryService[key]).isFunction();
        };
        return longPolling;
      }
    ];
  });

}).call(this);
