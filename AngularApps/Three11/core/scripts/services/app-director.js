// Generated by CoffeeScript 1.9.2
(function() {
  'use strict';
  define(['lodash', 'core/util/props', './app-director/find-state-for-path'], function(_, props, findStateForPath) {
    return function() {
      var createDirector, theProvider;
      theProvider = void 0;
      createDirector = [
        '$injector', 'authToken', 'loginNotifier', 'logoutNotifier', 'appReady', function($injector, authToken, loginNotifier, logoutNotifier, onAppReady) {
          var $location, $state, Home, Login, bindToServiceFunc, defineProperty, getFinalState, goHomeWhenReady, goToInitialState, goToState, goToStateWhenReady, query, referrer, theService, trimUrl;
          theService = {};
          Login = 'login';
          Home = 'home';
          $state = $injector.get('$state');
          defineProperty = _.bindKey(Object, 'defineProperty', theService);
          bindToServiceFunc = function(func) {
            return _.bindKey(theService, func);
          };
          getFinalState = function(state) {
            var parameters;
            parameters = state.parameters;
            while (state["default"] != null) {
              state = (function() {
                var defaultState;
                defaultState = $state.get(state["default"]);
                defaultState.transitionParams = _.assign(state.transitionParams || {}, parameters);
                return defaultState;
              })();
            }
            if (state.initializedIn != null) {
              state = (function() {
                var initState;
                initState = _.find($state.get(), function(s) {
                  return s.name === state.initializedIn;
                });
                if (initState) {
                  initState.transitionParams = _.assign(initState.transitionParams || {}, parameters);
                }
                return initState || state;
              })();
            }
            return state;
          };
          trimUrl = function(url) {
            var length, startIndex;
            startIndex = (_.first(url)) === '/' ? 1 : 0;
            length = url.length - ((_.last(url)) === '/' ? 1 : 0);
            return url.slice(startIndex, length);
          };
          goToState = function(state) {
            return function() {
              var stateDef, targetState;
              targetState = theProvider[state];
              if (targetState == null) {
                return;
              }
              if (stateDef = $state.get(targetState)) {
                if (stateDef["default"]) {
                  targetState = stateDef["default"];
                }
              }
              return $state.go(targetState, void 0, {
                reload: true
              });
            };
          };
          defineProperty(Login, {
            value: goToState(Login + "State")
          });
          defineProperty(Home, {
            value: goToState(Home + "State")
          });
          $location = $injector.get('$location');
          query = $location != null ? typeof $location.search === "function" ? $location.search() : void 0 : void 0;
          if (query != null) {
            referrer = query.referrer;
            query = _.omit(query, 'referrer');
          }
          goToStateWhenReady = function(goToStateFunc) {
            return function() {
              var detach, logoutDetach;
              detach = onAppReady(function() {
                logoutDetach();
                detach();
                goToStateFunc();
              });
              logoutDetach = logoutNotifier(function() {
                detach();
                logoutDetach();
              });
            };
          };
          goHomeWhenReady = goToStateWhenReady(bindToServiceFunc(Home));
          if (referrer) {
            goToInitialState = (function() {
              var $rootScope, goToLocation, goToPublicState, parameters, state, stateName, trimedUrl;
              trimedUrl = trimUrl(referrer);
              state = $injector.invoke(findStateForPath, $injector, {
                url: trimedUrl
              });
              if (state == null) {
                goToLocation = goHomeWhenReady;
              } else {
                state = getFinalState(state);
                parameters = state.parameters;
                if (state.isPublic) {
                  if (parameters != null) {
                    goToPublicState = _.bindKey($state, 'transitionTo', state.name, parameters);
                  } else {
                    goToPublicState = _.bindKey($state, 'go', state.name);
                  }
                  goToLocation = function() {
                    var detach;
                    if (!authToken.isLoggedIn) {
                      loginNotifier();
                    }
                    return detach = onAppReady(function() {
                      detach();
                      return goToPublicState();
                    });
                  };
                } else {
                  stateName = state.name;
                  if (parameters != null) {
                    state.transitionParams = _.assign(state.transitionParams || {}, parameters);
                    goToLocation = goToStateWhenReady(_.bindKey($state, 'go', stateName, parameters));
                  } else {
                    goToLocation = goToStateWhenReady(_.bindKey($state, 'go', stateName));
                  }
                }
                $rootScope = $injector.get('$rootScope');
                if ($rootScope != null) {
                  (function(state, parameters) {
                    var detach;
                    defineProperty('initialParameters', {
                      get: function() {
                        return parameters;
                      }
                    });
                    defineProperty('initialState', {
                      get: function() {
                        return state;
                      }
                    });
                    return detach = $rootScope.$on('$stateChangeStart', function(evt, to, toParams, from) {
                      if (from.name === state.name) {
                        detach();
                        parameters = void 0;
                        state = void 0;
                      }
                    });
                  })(state, parameters);
                }
              }
              if (authToken.isLoggedIn || state.isPublic) {
                return goToLocation;
              }
              return (function() {
                var detach;
                detach = loginNotifier(function() {
                  detach();
                  goToLocation();
                });
                return bindToServiceFunc(Login);
              })();
            })();
          } else {
            if (authToken.isLoggedIn) {
              goToInitialState = (function() {
                var finalState;
                finalState = getFinalState($state.get(theProvider[Home + "State"]));
                return goToStateWhenReady(_.bindKey($state, 'go', finalState));
              })();
            } else {
              goToInitialState = (function() {
                var detach;
                detach = loginNotifier(function() {
                  detach();
                  goHomeWhenReady();
                });
                return bindToServiceFunc(Login);
              })();
            }
          }
          goToInitialState();
          logoutNotifier(function() {
            var detach;
            detach = loginNotifier(function() {
              detach();
              goHomeWhenReady();
            });
            theService.login();
          });
          if (authToken.isLoggedIn) {
            loginNotifier();
          }
          return theService;
        }
      ];
      return theProvider = props({}, {
        $get: {
          value: createDirector
        }
      });
    };
  });

}).call(this);
