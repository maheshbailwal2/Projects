// Generated by CoffeeScript 1.9.2
(function() {
  'use strict';
  define(['lodash', 'core/util/props', 'core/util/strip-properties', 'core/util/make-observable'], function(_, props, stripProps, makeObservable) {
    return function(queryService, $log) {
      var $on, _activePromise, _data, assign, clear, fetchUserInfo, observableService, onError, onSuccess, theService;
      _activePromise = void 0;
      _data = void 0;
      theService = {};
      observableService = void 0;
      onSuccess = function(data) {
        _activePromise = void 0;
        data = _.isArray(data) ? _.first(data) : data;
        observableService.assign(data);
      };
      onError = function(reason) {
        _activePromise = void 0;
        theService.clear();
        if ($log != null) {
          $log.error(reason);
        }
      };
      fetchUserInfo = function() {
        if (!_activePromise) {
          theService.clear();
          _activePromise = queryService.usersCurrent();
          _activePromise.then(onSuccess, onError);
        }
        return _activePromise;
      };
      clear = function() {
        if (_activePromise != null) {
          if (typeof _activePromise.cancel === "function") {
            _activePromise.cancel();
          }
        }
        _activePromise = void 0;
        _data = void 0;
        stripProps(theService);
      };
      assign = function(user) {
        this.clear();
        _data = user;
        _.assign(theService, _data);
        return this;
      };
      observableService = makeObservable(props(theService, {
        hasData: {
          value: function() {
            return !_.isEmpty(theService);
          }
        },
        init: {
          value: fetchUserInfo
        },
        clear: {
          value: _.bind(clear, theService)
        },
        clone: {
          value: function() {
            return _data != null ? _data.clone() : void 0;
          }
        },
        assign: {
          enumerable: true,
          value: _.bind(assign, theService)
        }
      }));
      $on = observableService.on;
      delete observableService.on;
      return props(observableService, {
        onAssign: {
          value: _.bind($on, makeObservable, 'assign')
        }
      });
    };
  });

}).call(this);
