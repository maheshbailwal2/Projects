// Generated by CoffeeScript 1.9.2
(function() {
  'use strict';
  define(['lodash', 'core/util/props', 'core/util/assert'], function(_, props, Assert) {
    var IsIgnoredState, createStateWrapper, findStatestUrlPartsIndex, isParameterPlaceholder;
    IsIgnoredState = Object.freeze({
      '': true,
      'app': true
    });
    isParameterPlaceholder = function(s) {
      return (s != null ? s.length : void 0) > 0 && s[0] === ':';
    };
    createStateWrapper = function(parent, state, stateUrlParts, stateParameterValues) {
      var stateUrl;
      if (parent != null ? parent.isSiblingWithSameUrlBase(state) : void 0) {
        return createStateWrapper(parent.parent, state, stateUrlParts, stateParameterValues);
      }
      if (_.isEmpty(stateParameterValues)) {
        stateUrl = state.url;
      } else {
        stateUrl = (function() {
          var parametersIndex;
          parametersIndex = 0;
          return _.reduce(stateUrlParts, function(acc, stateUrlPart) {
            if (_.isEmpty(stateUrlPart)) {
              return acc;
            } else {
              if ((parent != null) || !_.isEmpty(acc)) {
                acc = acc + "/";
              }
              if (isParameterPlaceholder(stateUrlPart)) {
                return "" + acc + stateParameterValues[parametersIndex++].value;
              } else {
                return "" + acc + stateUrlPart;
              }
            }
          }, '') + (stateParameterValues.query || '');
        })();
      }
      return props(Object.create(state), {
        parent: {
          get: function() {
            return parent;
          }
        },
        url: {
          get: function() {
            return "" + ((parent != null ? parent.url : void 0) || '') + stateUrl;
          }
        },
        raw: {
          get: function() {
            return state;
          }
        },
        rawUrl: {
          get: function() {
            return "" + ((parent != null ? parent.rawUrl : void 0) || '') + state.url;
          }
        },
        pathLength: {
          get: function() {
            return ((parent != null ? parent.pathLength : void 0) || 0) + stateUrlParts.length;
          }
        },
        isParentOf: {
          value: function(candidateState) {
            return (candidateState.name.indexOf(state.name)) === 0;
          }
        },
        isSiblingWithSameUrlBase: {
          value: function(candidateState) {
            return (candidateState.url.indexOf(this.rawUrl)) === 0;
          }
        }
      });
    };
    findStatestUrlPartsIndex = function(statesCollection, searchUrl) {
      var currentUrlPartIndex, dismissedParents, lastParent, parameters, urlParts;
      dismissedParents = props({}, {
        wasParentDismissed: {
          value: function(childState) {
            var endOfParentStateName;
            endOfParentStateName = childState != null ? childState.lastIndexOf('.') : void 0;
            return endOfParentStateName !== -1 && !!dismissedParents[childState.substring(0, endOfParentStateName)];
          }
        }
      });
      lastParent = void 0;
      currentUrlPartIndex = 0;
      urlParts = _.reject(searchUrl.split('/'), _.isEmpty);
      parameters = {};
      _.each(statesCollection, function(state) {
        var getStatePathLength, isLast, stateParameterValues, stateUrl, stateUrlParts;
        if (!(state.url && state.name)) {
          return;
        }
        if ((lastParent == null) || (lastParent.isParentOf(state)) || (lastParent.isSiblingWithSameUrlBase(state))) {
          if (dismissedParents.wasParentDismissed(state.name)) {
            dismissedParents[state.name] = state;
            return;
          } else {
            stateUrl = state.url;
            stateUrlParts = _.reject(stateUrl.split('/'), _.isEmpty);
            if (stateUrl.length > 1 && stateUrl[0] === '/') {
              currentUrlPartIndex = (lastParent != null ? lastParent.pathLength : void 0) || 0;
              getStatePathLength = function() {
                return lastParent.pathLength;
              };
            } else {
              getStatePathLength = function() {
                return stateUrlParts.length;
              };
            }
            isLast = function(index) {
              return stateUrlParts.length - index === 1;
            };
            stateParameterValues = [];
            _.each(stateUrlParts, function(stateUrlPart, index) {
              if (isParameterPlaceholder(stateUrlPart)) {
                (function() {
                  var IgnoreChars, paramKey, queryParams, values, valuesSplit;
                  values = urlParts[currentUrlPartIndex++];
                  valuesSplit = values.split('?');
                  paramKey = _.first(stateUrlPart.split('?'));
                  stateParameterValues.push({
                    key: (_.rest(paramKey)).join(''),
                    value: _.first(valuesSplit)
                  });
                  if (valuesSplit.length > 1) {
                    IgnoreChars = {
                      '?': true,
                      '&': true
                    };
                    queryParams = _.reject((_.last(valuesSplit)).split(/(\?|&)/g), _.isEmpty);
                    _.each(queryParams, function(param) {
                      var key, separatorIndex, value;
                      if (!IgnoreChars[param]) {
                        separatorIndex = param.indexOf('=');
                        key = param.substr(0, separatorIndex);
                        value = param.substring(separatorIndex + 1);
                        stateParameterValues.push({
                          key: key,
                          value: value,
                          query: true
                        });
                      }
                      return true;
                    });
                    stateParameterValues.query = "?" + (_.last(valuesSplit));
                  }
                })();
              } else if (stateUrlPart === urlParts[currentUrlPartIndex]) {
                ++currentUrlPartIndex;
              } else {
                dismissedParents[state.name] = state;
                return false;
              }
              if (isLast(index)) {
                lastParent = createStateWrapper(lastParent, state, stateUrlParts, stateParameterValues);
                _.assign(parameters, _.reduce(stateParameterValues, function(acc, param) {
                  acc[param.key] = decodeURIComponent(param.value);
                  return acc;
                }, {}));
                if (urlParts.length !== getStatePathLength()) {
                  currentUrlPartIndex = 0;
                }
                return false;
              }
            });
            return currentUrlPartIndex < urlParts.length;
          }
        }
        return (lastParent != null ? lastParent.url : void 0) !== searchUrl;
      });
      if ((lastParent != null ? lastParent.url : void 0) === searchUrl) {
        return (function() {
          var resultState;
          resultState = _.assign({}, lastParent.raw);
          if (!_.isEmpty(parameters)) {
            resultState.parameters = parameters;
          }
          return resultState;
        })();
      }
    };
    return [
      '$state', 'url', function($state, url) {
        return findStatestUrlPartsIndex($state.get(), url);
      }
    ];
  });

}).call(this);
