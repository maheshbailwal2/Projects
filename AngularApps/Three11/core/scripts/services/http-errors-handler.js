// Generated by CoffeeScript 1.9.2
(function() {
  'use strict';
  define(['angular', 'lodash', 'core/util/prop', 'core/util/chain-of-responsibility', 'core/app'], function(ng, _, prop, createChainOfResponsibility) {
    var MvKey, createProvider, newInterceptor;
    MvKey = '$$mvKey';
    newInterceptor = function(handlers, md5, $q) {
      var appendKey, interceptor;
      appendKey = function(config) {
        prop(config, MvKey, {
          enumerable: true,
          configurable: true,
          value: md5(config)
        });
        return config[MvKey];
      };
      return interceptor = {
        request: function(config) {
          if (config[MvKey] == null) {
            appendKey(config);
          }
          if (handlers != null) {
            return handlers('request', config);
          }
          return config;
        },
        response: function(response) {
          var key, ref;
          key = response != null ? (ref = response.config) != null ? ref[MvKey] : void 0 : void 0;
          if (key != null) {
            if (handlers != null) {
              response = handlers('response', response);
            }
            delete response.config[MvKey];
          }
          return response;
        },
        responseError: function(response) {
          var key, processed, ref, ref1;
          key = response != null ? (ref = response.config) != null ? ref[MvKey] : void 0 : void 0;
          processed = response;
          if (key != null) {
            if (handlers != null) {
              processed = handlers('responseError', response);
            }
            if ((processed != null) && 'then' in processed) {
              if ((ref1 = processed.config) != null) {
                delete ref1[MvKey];
              }
            }
          }
          return processed || $q.reject(response);
        }
      };
    };
    return createProvider = function() {
      var _chainOfResponsibility, theProvider;
      _chainOfResponsibility = createChainOfResponsibility({
        MvKey: MvKey
      });
      theProvider = _.assign({}, _chainOfResponsibility);
      theProvider.$get = [
        '$injector', 'md5', '$q', function($injector, md5, $q) {
          return newInterceptor($injector.invoke(_chainOfResponsibility.$get), md5, $q);
        }
      ];
      return theProvider;
    };
  });

}).call(this);
