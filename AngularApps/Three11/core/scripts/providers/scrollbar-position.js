// Generated by CoffeeScript 1.9.2
(function() {
  'use strict';
  define(['lodash', 'core/util/props', 'core/util/assert'], function(_, props, Assert) {
    var createPositionUpdater, provider;
    createPositionUpdater = function(key, scrollbar, $rootScope, $timeout) {
      var _current, setFractionScrolled, updateFractionScrolled;
      _current = void 0;
      setFractionScrolled = function() {
        if (_current != null) {
          scrollbar.setFractionScrolled(key, _current);
          $rootScope.$apply();
        }
      };
      return updateFractionScrolled = function() {
        _current = scrollbar.getFractionScrolled(key);
        $timeout(setFractionScrolled, 0);
      };
    };
    return provider = function() {
      var _observablesConfig, serviceCtor;
      _observablesConfig = void 0;
      serviceCtor = [
        '$timeout', '$rootScope', '$injector', function($timeout, $rootScope, $injector) {
          var _maxScrollValue, _scrollPosition, _theModel;
          _theModel = {};
          _scrollPosition = {};
          _maxScrollValue = void 0;
          _.each(_observablesConfig, function(def) {
            var callback, observer;
            observer = $injector.get(def.observer);
            callback = createPositionUpdater(def.key, _theModel, $rootScope, $timeout);
            observer.on(def.evtName, callback);
          });
          return props(_theModel, {
            clear: {
              value: function(id) {
                if (id != null) {
                  return delete _scrollPosition[id];
                } else {
                  return _scrollPosition = {};
                }
              }
            },
            getPosition: {
              value: function(id) {
                var ref;
                return ((ref = _scrollPosition[id]) != null ? ref['pos'] : void 0) || 0;
              }
            },
            setPosition: {
              value: function(id, position) {
                if (_scrollPosition[id] == null) {
                  _scrollPosition[id] = {};
                }
                _scrollPosition[id]['pos'] = position;
                return this;
              }
            },
            setMaxScrollValue: {
              value: function(id, value) {
                Assert(_.isNumber(value));
                return _maxScrollValue = value;
              }
            },
            getFractionScrolled: {
              value: function(id) {
                if (_scrollPosition[id] && _maxScrollValue && _maxScrollValue > 0) {
                  return _scrollPosition[id].pos / _maxScrollValue;
                }
                return 0;
              }
            },
            setFractionScrolled: {
              value: function(id, fraction) {
                if (!((_scrollPosition[id] != null) && (_maxScrollValue != null))) {
                  return 0;
                }
                return _theModel.setPosition(id, _maxScrollValue * fraction);
              }
            }
          });
        }
      ];
      props(this, {
        on: {
          value: function(scrollbarId, observerId, eventKey) {
            _observablesConfig = _observablesConfig || [];
            _observablesConfig.push({
              key: scrollbarId,
              observer: observerId,
              evtName: eventKey
            });
            return this;
          }
        },
        $get: {
          value: serviceCtor
        }
      });
    };
  });

}).call(this);
