using AppUpdater.Core;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;

namespace AppUpdater
{
    public class GitHubAppUpdater : IAppUpdater
    {
        private readonly AppUpdateDetail _appUpdateDetail;

        private readonly IGitHub _gitHub;

        const string DownloadUrl = "download_url";
        public GitHubAppUpdater(IGitHub gitHub, AppUpdateDetail appUpdateDetail)
        {
            _appUpdateDetail = appUpdateDetail;
            _gitHub = gitHub;
        }

        public string GetLatestVesrion()
        {
            var versionFile = "Version.txt";
            var versionFilePath = _appUpdateDetail.RemoteSource + "/" + versionFile;
            return GetLatestVesrionFrormRemote(versionFilePath);
        }

        public void UpdateApp()
        {
            _gitHub.PullFolderServer(_appUpdateDetail.RemoteSource, _appUpdateDetail.LocalDestination, _appUpdateDetail.ExcludeFiles);
        }

        private void DownLoadFile(string url, string downloadFilePath)
        {
            using (var wc = new WebClient())
            {
                var uri = new Uri(url);

                wc.DownloadFile(uri, downloadFilePath);
            }
        }

        private string GetLatestVesrionFrormRemote(string url)
        {
            try
            {
                //Finding : if async method is called without await and using Result
                // in that exception thrown from async method will get converted into a AggregateException

                //http://stackoverflow.com/questions/12007781/why-doesnt-await-on-task-whenall-throw-an-aggregateexception
                //When you use await, the code generated by the compiler unwraps the AggregateException and throws 
                //the underlying exception. 
                return _gitHub.ReadAllTextAysnc(url).Result;
            }
            catch (AggregateException ex)
            {
                throw new LocationNotReachableException(url, ex);
            }
        }

    }
}
